const fs = require("fs");
const path = require("path");

function demoGeneratedApp() {
  console.log("🎯 Demo: Complete FynApp Generated by Smart Detection\n");

  const appDir = path.join(__dirname, "../test/demo/test-fynapp");

  if (!fs.existsSync(appDir)) {
    console.log("❌ Generated app not found. Run `npm run jest-test` first.");
    return;
  }

  console.log("✅ Generated FynApp found at:", appDir);
  console.log("\n📁 Complete App Structure:");

  function showTree(dir, prefix = "", isLast = true) {
    const items = fs.readdirSync(dir).sort();

    items.forEach((item, index) => {
      const itemPath = path.join(dir, item);
      const isDirectory = fs.statSync(itemPath).isDirectory();
      const isLastItem = index === items.length - 1;
      const connector = isLastItem ? "└── " : "├── ";
      const icon = isDirectory ? "📁" : "📄";

      console.log(`${prefix}${connector}${icon} ${item}`);

      if (isDirectory && item !== "node_modules") {
        const newPrefix = prefix + (isLastItem ? "    " : "│   ");
        showTree(itemPath, newPrefix, isLastItem);
      }
    });
  }

  showTree(appDir);

  console.log("\n🔍 Smart Detection Results:");

  // Show package.json React version
  const packageJson = JSON.parse(fs.readFileSync(path.join(appDir, "package.json"), "utf8"));
  console.log(`📦 React Version Detected: ${packageJson.dependencies["esm-react"]}`);

  // Show rollup config exposes
  const rollupConfig = fs.readFileSync(path.join(appDir, "rollup.config.mjs"), "utf8");
  const exposesMatch = rollupConfig.match(/exposes: \{([^}]+)\}/s);
  if (exposesMatch) {
    console.log("🎯 Auto-detected Exposes:");
    const exposesContent = exposesMatch[1];
    const exposeLines = exposesContent.split("\n").filter((line) => line.includes('"./'));
    exposeLines.forEach((line) => {
      const trimmed = line.trim().replace(/,$/, "");
      if (trimmed) {
        console.log(`  ${trimmed}`);
      }
    });
  }

  console.log("\n🚀 Generated Features:");
  console.log("  ✅ Complete React 18 setup with TypeScript");
  console.log("  ✅ Module Federation configuration");
  console.log("  ✅ Smart exposes detection (main, App, config, components, utils)");
  console.log("  ✅ Semver-preserved React version (^18.3.0)");
  console.log("  ✅ Modern Modal component with configurable overlay");
  console.log("  ✅ Reusable Button component with variants");
  console.log("  ✅ Utility functions and API client");
  console.log("  ✅ Proper barrel exports");
  console.log("  ✅ Development and build scripts");
  console.log("  ✅ SystemJS integration for microfrontend loading");

  console.log("\n📋 Component Highlights:");

  // Show Modal component features
  const modalContent = fs.readFileSync(path.join(appDir, "src/components/Modal.tsx"), "utf8");
  if (modalContent.includes("overlayOpacity") && modalContent.includes("overlayBlur")) {
    console.log("  🎭 Modal: Configurable overlay opacity and blur");
  }

  // Show Button component features
  const buttonContent = fs.readFileSync(path.join(appDir, "src/components/Button.tsx"), "utf8");
  if (buttonContent.includes("variant")) {
    console.log("  🔘 Button: Primary/secondary variants with styled themes");
  }

  console.log("\n🛠️  Ready to Use Commands:");
  console.log("  📁 cd test/demo/test-fynapp");
  console.log("  📦 npm install");
  console.log("  🔨 npm run build");
  console.log("  🚀 npm run dev");
  console.log("  🌐 npm run serve");

  console.log("\n🎉 This demonstrates the complete end-to-end capability of:");
  console.log("  • Smart React version detection from package.json");
  console.log("  • Intelligent project structure scanning for exposes");
  console.log("  • Complete FynApp generation with modern best practices");
  console.log("  • Ready-to-use microfrontend with federation setup");

  console.log("\n✨ The generated app is production-ready and follows FynMesh patterns!");
}

demoGeneratedApp();
