{"version":3,"file":"react-context-CVNge9KK.js","sources":["../src/middleware/react-context.tsx"],"sourcesContent":["// @ts-ignore\nimport React, { \n  createContext, \n  useContext, \n  useState, \n  useCallback, \n  useRef, \n  useEffect, \n  useMemo,\n  ReactNode,\n} from \"react\";\n\nimport type { FynApp, FynAppMiddleware, FynAppMiddlewareCallContext } from \"@fynmesh/kernel\";\n\n// =============================================================================\n// Type Definitions\n// =============================================================================\n\n/**\n * Action definition with optional validation\n */\nexport interface ActionDefinition<T = any> {\n  reducer: (state: T, ...args: any[]) => Partial<T> | ((prevState: T) => Partial<T>);\n  validator?: (state: T, ...args: any[]) => boolean;\n}\n\n/**\n * Storage configuration for context persistence\n */\nexport interface PersistenceConfig {\n  key: string;\n  storage: 'localStorage' | 'sessionStorage' | 'memory';\n  /** @deprecated Use storage instead */\n  type?: 'localStorage' | 'sessionStorage' | 'memory';\n}\n\n/**\n * Middleware hooks for context state changes\n */\nexport interface ContextMiddlewareHooks<T = any> {\n  onStateChange?: (oldState: T, newState: T, action: string, contextName: string) => void;\n  validation?: (state: T, contextName: string) => boolean;\n  onError?: (error: Error, contextName: string) => void;\n}\n\n/**\n * Configuration for a single context\n */\nexport interface ContextConfig<T = any> {\n  contextName: string;\n  initialState: T;\n  actions?: Record<string, ActionDefinition<T> | ((state: T, ...args: any[]) => Partial<T>)>;\n  persistence?: PersistenceConfig;\n  shared?: boolean;\n  middleware?: ContextMiddlewareHooks<T>;\n}\n\n/**\n * Context value provided to React components\n */\nexport interface ContextValue<T = any> {\n  state: T;\n  actions: Record<string, (...args: any[]) => void>;\n  setState: (updater: Partial<T> | ((prevState: T) => Partial<T>)) => void;\n}\n\n/**\n * Configuration for the React Context middleware\n */\nexport interface ReactContextMiddlewareConfig {\n  contexts: ContextConfig[] | Record<string, Omit<ContextConfig, 'contextName'>>;\n}\n\n/**\n * Context factory interface\n */\ninterface ContextFactory<T = any> {\n  Provider: React.ComponentType<{ children: ReactNode; fynAppId?: string; externalState?: any }>;\n  useContext: () => ContextValue<T>;\n  useContextSelector: <K>(selector: (state: T) => K) => K;\n  Context: React.Context<ContextValue<T> | undefined>;\n}\n\n/**\n * Context instance data\n */\ninterface ContextInstanceData {\n  factory: ContextFactory;\n  config: ContextConfig;\n  shared: boolean;\n}\n\n// =============================================================================\n// Error Boundary Component\n// =============================================================================\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  contextName: string;\n  onError?: (error: Error, contextName: string) => void;\n}\n\nfunction ContextErrorBoundary({ children, contextName, onError }: ErrorBoundaryProps) {\n  // Simple error boundary wrapper\n  // For production, consider using react-error-boundary library\n  try {\n    return React.createElement(React.Fragment, null, children);\n  } catch (error) {\n    console.error(`Error in context ${contextName}:`, error);\n    onError?.(error instanceof Error ? error : new Error(String(error)), contextName);\n    \n    return React.createElement('div', {\n      style: { padding: '20px', border: '1px solid red', backgroundColor: '#fee' }\n    }, [\n      React.createElement('h3', { key: 'title' }, `Context Error: ${contextName}`),\n      React.createElement('p', { key: 'message' }, 'An error occurred in this context. Check console for details.'),\n    ]);\n  }\n}\n\n// =============================================================================\n// Storage Manager\n// =============================================================================\n\nclass StorageManager {\n  private memoryStorage = new Map<string, any>();\n\n  private getStorageKey(config: PersistenceConfig, fynAppId?: string): string {\n    return fynAppId ? `${config.key}-${fynAppId}` : config.key;\n  }\n\n  private getStorageType(config: PersistenceConfig): 'localStorage' | 'sessionStorage' | 'memory' {\n    // Handle legacy 'type' property\n    return config.storage || config.type || 'memory';\n  }\n\n  load<T>(config: PersistenceConfig, initialState: T, fynAppId?: string): T {\n    try {\n      const key = this.getStorageKey(config, fynAppId);\n      const storageType = this.getStorageType(config);\n      \n      let stored: string | null = null;\n      \n      switch (storageType) {\n        case 'localStorage':\n          if (typeof window !== 'undefined' && window.localStorage) {\n            stored = localStorage.getItem(key);\n          }\n          break;\n        case 'sessionStorage':\n          if (typeof window !== 'undefined' && window.sessionStorage) {\n            stored = sessionStorage.getItem(key);\n          }\n          break;\n        case 'memory':\n          stored = this.memoryStorage.get(key) || null;\n          break;\n      }\n      \n      if (stored) {\n        const parsedState = typeof stored === 'string' ? JSON.parse(stored) : stored;\n        return { ...initialState, ...parsedState };\n      }\n    } catch (error) {\n      console.warn(`Failed to load persisted state:`, error);\n    }\n    \n    return initialState;\n  }\n\n  save<T>(config: PersistenceConfig, state: T, fynAppId?: string): void {\n    try {\n      const key = this.getStorageKey(config, fynAppId);\n      const storageType = this.getStorageType(config);\n      const serialized = JSON.stringify(state);\n      \n      switch (storageType) {\n        case 'localStorage':\n          if (typeof window !== 'undefined' && window.localStorage) {\n            localStorage.setItem(key, serialized);\n          }\n          break;\n        case 'sessionStorage':\n          if (typeof window !== 'undefined' && window.sessionStorage) {\n            sessionStorage.setItem(key, serialized);\n          }\n          break;\n        case 'memory':\n          this.memoryStorage.set(key, serialized);\n          break;\n      }\n    } catch (error) {\n      console.warn(`Failed to persist state:`, error);\n    }\n  }\n\n  clear(config: PersistenceConfig, fynAppId?: string): void {\n    try {\n      const key = this.getStorageKey(config, fynAppId);\n      const storageType = this.getStorageType(config);\n      \n      switch (storageType) {\n        case 'localStorage':\n          if (typeof window !== 'undefined' && window.localStorage) {\n            localStorage.removeItem(key);\n          }\n          break;\n        case 'sessionStorage':\n          if (typeof window !== 'undefined' && window.sessionStorage) {\n            sessionStorage.removeItem(key);\n          }\n          break;\n        case 'memory':\n          this.memoryStorage.delete(key);\n          break;\n      }\n    } catch (error) {\n      console.warn(`Failed to clear persisted state:`, error);\n    }\n  }\n}\n\n// =============================================================================\n// Context Provider Factory\n// =============================================================================\n\nfunction createContextProvider<T>(config: ContextConfig<T>, storageManager: StorageManager): ContextFactory<T> {\n  const Context = createContext<ContextValue<T> | undefined>(undefined);\n\n  function Provider({ children, fynAppId, externalState }: { children: ReactNode; fynAppId?: string; externalState?: any }) {\n    // Use external state store if provided, otherwise use internal React state\n    const [internalState, setInternalState] = useState<T>(() => {\n      if (externalState) {\n        // If using external state, get initial state from it\n        return externalState.getState();\n      }\n      // Load initial state from persistence for internal state\n      if (config.persistence) {\n        return storageManager.load(config.persistence, config.initialState, fynAppId);\n      }\n      return config.initialState;\n    });\n\n    const [state, setState] = useMemo(() => {\n      if (externalState) {\n        // Use external state store\n        return [externalState.getState(), externalState.setState];\n      }\n      // Use internal React state\n      return [internalState, setInternalState];\n    }, [externalState, internalState]);\n\n    const prevStateRef = useRef<T>(state);\n\n    // Subscribe to external state changes\n    useEffect(() => {\n      if (externalState) {\n        const unsubscribe = externalState.subscribe(() => {\n          const newState = externalState.getState();\n          setInternalState(newState);\n        });\n        return unsubscribe;\n      }\n    }, [externalState]);\n\n    // Persist state changes (only for internal state, external state handles its own persistence)\n    useEffect(() => {\n      if (!externalState && config.persistence && prevStateRef.current !== state) {\n        storageManager.save(config.persistence, state, fynAppId);\n      }\n      prevStateRef.current = state;\n    }, [state, fynAppId, externalState]);\n\n    // Create memoized actions\n    const actions = useMemo(() => {\n      if (!config.actions) return {};\n\n      const actionMap: Record<string, (...args: any[]) => void> = {};\n\n      Object.entries(config.actions).forEach(([actionName, actionDef]) => {\n        actionMap[actionName] = (...args: any[]) => {\n          // Use external state methods if available and action name matches\n          if (externalState && typeof externalState[actionName] === 'function') {\n            externalState[actionName](...args);\n            return;\n          }\n          \n          // Otherwise use regular setState logic\n          setState((prevState: T) => {\n            try {\n              // Handle both old and new action formats\n              let actionFn: (state: T, ...args: any[]) => Partial<T> | ((prevState: T) => Partial<T>);\n              let validator: ((state: T, ...args: any[]) => boolean) | undefined;\n              \n              if (typeof actionDef === 'function') {\n                // Legacy format: direct function\n                actionFn = actionDef;\n              } else if (actionDef && typeof actionDef === 'object' && 'reducer' in actionDef) {\n                // New format: { validator, reducer }\n                actionFn = actionDef.reducer;\n                validator = actionDef.validator;\n              } else {\n                console.warn(`Invalid action definition for ${actionName} in context ${config.contextName}`);\n                return prevState;\n              }\n              \n              // Validate action arguments if validator exists\n              if (validator && !validator(prevState, ...args)) {\n                console.warn(`Validation failed for action ${actionName} in context ${config.contextName}`, args);\n                return prevState;\n              }\n\n              // Validate current state if global validator provided\n              if (config.middleware?.validation && !config.middleware.validation(prevState, config.contextName)) {\n                console.warn(`State validation failed for context ${config.contextName}`);\n                return prevState;\n              }\n\n              const result = actionFn(prevState, ...args);\n              const newState = typeof result === 'function' \n                ? { ...prevState, ...result(prevState) }\n                : { ...prevState, ...result };\n\n              // Call middleware hook\n              if (config.middleware?.onStateChange) {\n                config.middleware.onStateChange(prevState, newState, actionName, config.contextName);\n              }\n\n              return newState;\n            } catch (error) {\n              console.error(`Error in action ${actionName} for context ${config.contextName}:`, error);\n              if (config.middleware?.onError) {\n                config.middleware.onError(error instanceof Error ? error : new Error(String(error)), config.contextName);\n              }\n              return prevState;\n            }\n          });\n        };\n      });\n\n      return actionMap;\n    }, [externalState]);\n\n    // Generic setState function\n    const setStateGeneric = useCallback((updater: Partial<T> | ((prevState: T) => Partial<T>)) => {\n      if (externalState) {\n        // Use external state's setState method\n        const currentState = externalState.getState();\n        const newState = typeof updater === 'function' \n          ? { ...currentState, ...updater(currentState) }\n          : { ...currentState, ...updater };\n        \n        externalState.setState(newState);\n        \n        if (config.middleware?.onStateChange) {\n          config.middleware.onStateChange(currentState, newState, 'setState', config.contextName);\n        }\n      } else {\n        // Use internal React state\n        setState((prevState: T) => {\n          try {\n            const newState = typeof updater === 'function' \n              ? { ...prevState, ...updater(prevState) }\n              : { ...prevState, ...updater };\n\n            if (config.middleware?.onStateChange) {\n              config.middleware.onStateChange(prevState, newState, 'setState', config.contextName);\n            }\n\n            return newState;\n          } catch (error) {\n            console.error(`Error in setState for context ${config.contextName}:`, error);\n            if (config.middleware?.onError) {\n              config.middleware.onError(error instanceof Error ? error : new Error(String(error)), config.contextName);\n            }\n            return prevState;\n          }\n        });\n      }\n    }, [externalState]);\n\n    const value: ContextValue<T> = useMemo(() => ({\n      state,\n      actions,\n      setState: setStateGeneric,\n    }), [state, actions, setStateGeneric, externalState]);\n\n    return React.createElement(Context.Provider, { value }, children);\n  }\n\n  // Custom hook for consuming the context\n  function useContextHook(): ContextValue<T> {\n    const context = useContext(Context);\n    if (context === undefined) {\n      throw new Error(`useContext for ${config.contextName} must be used within its Provider`);\n    }\n    return context;\n  }\n\n  // Selector hook for performance optimization\n  function useContextSelector<K>(selector: (state: T) => K): K {\n    const { state } = useContextHook();\n    return useMemo(() => selector(state), [state, selector]);\n  }\n\n  return {\n    Provider,\n    useContext: useContextHook,\n    useContextSelector,\n    Context,\n  };\n}\n\n// =============================================================================\n// Middleware Implementation\n// =============================================================================\n\nexport class ReactContextMiddleware implements FynAppMiddleware {\n  public readonly name = \"react-context\";\n\n  private storageManager = new StorageManager();\n  private contextFactories = new Map<string, ContextFactory>();\n  private contextInstances = new WeakMap<FynApp, Map<string, ContextInstanceData>>();\n  private sharedContexts = new Map<string, ContextFactory>();\n  private sharedProviderInstances = new Map<string, React.ComponentType<{ children: ReactNode }>>();\n  private sharedProviderSymbols = new Map<string, symbol>();\n  private sharedStateStores = new Map<string, any>(); // NEW: Shared state stores outside React\n  private secondaryConsumers = new Set<FynApp>(); // Track secondary consumers for updates\n  private readyCallback?: () => void; // 🆕 Callback to signal readiness\n\n  async setup(_context: FynAppMiddlewareCallContext): Promise<void> {\n    console.log(`${this.name} middleware initialized`);\n  }\n\n  /**\n   * Check if middleware is ready for specific user requirements\n   * This is called after user.initialize() to determine if we can fulfill their needs\n   */\n  isReadyForUser(userRequirements: any): boolean {\n    console.log(`🔍 ${this.name} checking readiness for user requirements:`, userRequirements);\n    \n    // If no specific requirements, we're ready\n    if (!userRequirements) {\n      return true;\n    }\n    \n    // Handle consumer mode - check if required contexts exist\n    if (userRequirements.mode === \"consumer\" && userRequirements.requiredContexts) {\n      for (const contextName of userRequirements.requiredContexts) {\n        if (!this.sharedContexts.has(contextName)) {\n          console.log(`❌ Required shared context \"${contextName}\" not available yet`);\n          return false;\n        }\n      }\n      console.log(`✅ All required shared contexts available`);\n      return true;\n    }\n    \n    // Handle provider mode - always ready to create contexts\n    if (userRequirements.mode === \"provider\") {\n      console.log(`✅ Provider mode - ready to create contexts`);\n      return true;\n    }\n    \n    // Default to ready for unknown modes\n    console.log(`✅ Unknown mode - defaulting to ready`);\n    return true;\n  }\n\n  async apply(callContext: FynAppMiddlewareCallContext): Promise<void> {\n    try {\n      // Store ready callback for signaling when shared contexts are created\n      if (callContext.meta.requireReady && !this.readyCallback) {\n        this.readyCallback = callContext.meta.requireReady;\n      }\n\n      // Handle different configuration types\n      if (!callContext.meta.config) {\n        console.log(`${this.name} middleware: No configuration found for ${callContext.fynApp.name}, skipping application`);\n        return;\n      }\n\n      // Check if this is a secondary \"consume-only\" app\n      if (typeof callContext.meta.config === 'string' && callContext.meta.config === 'consume-only') {\n        console.log(`${this.name} middleware: ${callContext.fynApp.name} is a secondary consumer, exposing shared contexts only`);\n        await this.handleSecondaryConsumer(callContext);\n        return;\n      }\n\n      // Handle primary app with full configuration\n      if (typeof callContext.meta.config === 'object' && callContext.meta.config.contexts) {\n        console.log(`${this.name} middleware: ${callContext.fynApp.name} is a primary provider, processing full configuration`);\n        return;\n      }\n\n      // Handle empty/invalid configuration\n      console.log(`${this.name} middleware: Invalid configuration for ${callContext.fynApp.name}, skipping application`);\n      return;\n\n    } catch (error) {\n      console.error(`Error applying ${this.name} middleware to ${callContext.fynApp.name}:`, error);\n      throw error;\n    }\n  }\n\n  private async handlePrimaryProvider(context: FynAppMiddlewareCallContext): Promise<void> {\n    const validatedConfig = this.validateConfig(context.meta.config);\n    const contextsToProcess = this.normalizeContextsConfig(validatedConfig.contexts);\n    \n    console.log(`Processing ${contextsToProcess.length} contexts for primary provider ${context.fynApp.name}`);\n\n    // Initialize contexts for this FynApp\n    if (!this.contextInstances.has(context.fynApp)) {\n      this.contextInstances.set(context.fynApp, new Map());\n    }\n    const fynAppContexts = this.contextInstances.get(context.fynApp)!;\n\n    // Process each context configuration\n    for (const contextConfig of contextsToProcess) {\n      await this.createContext(context, contextConfig, fynAppContexts);\n    }\n\n    // Expose context APIs to the FynApp\n      this.exposeContextAPIs(context.fynApp, fynAppContexts);\n  }\n\n  private async handleSecondaryConsumer(context: FynAppMiddlewareCallContext): Promise<void> {\n    // Track this FynApp as a secondary consumer\n    this.secondaryConsumers.add(context.fynApp);\n    \n    // Initialize contexts for this FynApp\n    if (!this.contextInstances.has(context.fynApp)) {\n      this.contextInstances.set(context.fynApp, new Map());\n    }\n    const fynAppContexts = this.contextInstances.get(context.fynApp)!;\n\n    // For secondary consumers, expose access to all existing shared contexts\n    for (const [contextName, sharedFactory] of this.sharedContexts.entries()) {\n      // Create a lightweight context reference that points to the shared context\n      const sharedSymbol = this.sharedProviderSymbols.get(contextName);\n      const sharedProvider = this.sharedProviderInstances.get(contextName);\n      \n      if (sharedSymbol && sharedProvider) {\n        // Create a minimal context config for the shared context\n        const sharedConfig: ContextConfig = {\n          contextName,\n          initialState: {},\n          shared: true,\n        };\n\n        fynAppContexts.set(contextName, {\n          factory: sharedFactory,\n          config: sharedConfig,\n          shared: true,\n        });\n\n        console.log(`Secondary consumer ${context.fynApp.name} can access shared context \"${contextName}\"`);\n      }\n    }\n\n    // Always expose context APIs (even if no shared contexts exist yet)\n    this.exposeContextAPIs(context.fynApp, fynAppContexts);\n    \n    // If no shared contexts available yet, log info message\n    if (this.sharedContexts.size === 0) {\n      console.log(`Secondary consumer ${context.fynApp.name} loaded before primary provider - shared contexts will be available once primary loads`);\n    }\n  }\n\n  private validateConfig(config: any): ReactContextMiddlewareConfig {\n    if (!config || typeof config !== 'object') {\n      throw new Error('Invalid configuration: config must be an object');\n    }\n    \n    if (!config.contexts) {\n      throw new Error('Invalid configuration: contexts property is required');\n    }\n    \n    return config as ReactContextMiddlewareConfig;\n  }\n\n  private normalizeContextsConfig(contexts: ReactContextMiddlewareConfig['contexts']): ContextConfig[] {\n    if (Array.isArray(contexts)) {\n      // Legacy array format - validate each context has contextName\n      return contexts.map(ctx => {\n        if (!ctx.contextName) {\n          throw new Error('Context configuration missing contextName');\n        }\n        return ctx;\n      });\n    } else if (typeof contexts === 'object') {\n      // New object format: convert to array with contextName property\n      return Object.entries(contexts).map(([name, contextConfig]) => ({\n        ...contextConfig,\n        contextName: name\n      }));\n    } else {\n      throw new Error('Invalid contexts configuration: must be array or object');\n    }\n  }\n\n  private async createContext(context: FynAppMiddlewareCallContext, config: ContextConfig, fynAppContexts: Map<string, ContextInstanceData>): Promise<void> {\n    const contextKey = config.shared ? config.contextName : `${context.fynApp.name}-${config.contextName}`;\n\n    // For shared contexts, use the shared factory; for non-shared, create FynApp-specific factory\n    let factory: ContextFactory;\n    \n    if (config.shared) {\n      // Check if shared factory already exists\n      if (!this.sharedContexts.has(config.contextName)) {\n        console.log(`Creating shared context factory for \"${config.contextName}\"`);\n        factory = createContextProvider(config, this.storageManager);\n        this.sharedContexts.set(config.contextName, factory);\n        \n        // Create a Symbol for this shared provider\n        const sharedSymbol = Symbol(`shared-provider-${config.contextName}`);\n        this.sharedProviderSymbols.set(config.contextName, sharedSymbol);\n        \n        // Create shared state store outside React context\n        const sharedStore = this.createSharedStateStore(config);\n        this.sharedStateStores.set(config.contextName, sharedStore);\n        \n        // Create a shared Provider component that uses the shared store\n        const SharedProvider = ({ children }: { children: ReactNode }) => {\n          return React.createElement(factory.Provider, { \n            children,\n            externalState: sharedStore // Pass shared store to provider\n          });\n        };\n        this.sharedProviderInstances.set(config.contextName, SharedProvider);\n        console.log(`Created shared Provider instance with shared store for \"${config.contextName}\"`);\n        \n        // Signal that middleware is now ready (has shared contexts)\n        if (this.readyCallback && this.sharedContexts.size === 1) {\n          console.log(`🔔 ${this.name} middleware signaling ready - first shared context created`);\n          this.readyCallback();\n        }\n        \n        // Update all secondary consumers to give them access to this new shared context\n        this.updateSecondaryConsumers(config.contextName, factory);\n      } else {\n        console.log(`Reusing existing shared context factory for \"${config.contextName}\"`);\n        factory = this.sharedContexts.get(config.contextName)!;\n      }\n    } else {\n      // Create FynApp-specific factory if not exists\n      if (!this.contextFactories.has(contextKey)) {\n        console.log(`Creating FynApp-specific context factory for \"${contextKey}\"`);\n        factory = createContextProvider(config, this.storageManager);\n        this.contextFactories.set(contextKey, factory);\n      } else {\n        factory = this.contextFactories.get(contextKey)!;\n      }\n    }\n\n    // Store context instance for this FynApp\n    fynAppContexts.set(config.contextName, {\n      factory,\n      config,\n      shared: config.shared || false,\n    });\n\n    console.log(`Configured context \"${config.contextName}\" for ${context.fynApp.name} (shared: ${config.shared || false})`);\n  }\n\n  private updateSecondaryConsumers(contextName: string, factory: ContextFactory): void {\n    // Update all secondary consumers to give them access to the new shared context\n    for (const secondaryFynApp of this.secondaryConsumers) {\n      const fynAppContexts = this.contextInstances.get(secondaryFynApp);\n      if (fynAppContexts) {\n        const sharedSymbol = this.sharedProviderSymbols.get(contextName);\n        const sharedProvider = this.sharedProviderInstances.get(contextName);\n        \n        if (sharedSymbol && sharedProvider) {\n          // Create a minimal context config for the shared context\n          const sharedConfig: ContextConfig = {\n            contextName,\n            initialState: {},\n            shared: true,\n          };\n\n          fynAppContexts.set(contextName, {\n            factory,\n            config: sharedConfig,\n            shared: true,\n          });\n\n          // Re-expose context APIs to update the secondary consumer\n          this.exposeContextAPIs(secondaryFynApp, fynAppContexts);\n          \n          console.log(`Updated secondary consumer ${secondaryFynApp.name} with new shared context \"${contextName}\"`);\n        }\n      }\n    }\n  }\n\n  private createSharedStateStore(config: ContextConfig): any {\n    // Create a shared state store based on the context configuration\n    if (config.contextName === 'counter') {\n      // For counter context, create a shared store with counter state\n      const listeners = new Set<() => void>();\n      let state = { count: 0 };\n      \n      const sharedStore = {\n        getState: () => state,\n        setState: (newState: any) => {\n          state = { ...state, ...newState };\n          // Notify all listeners\n          listeners.forEach(listener => listener());\n        },\n        subscribe: (listener: () => void) => {\n          listeners.add(listener);\n          return () => listeners.delete(listener);\n        },\n        // Counter-specific methods\n        increment: () => {\n          state = { ...state, count: state.count + 1 };\n          listeners.forEach(listener => listener());\n        },\n        decrement: () => {\n          state = { ...state, count: state.count - 1 };\n          listeners.forEach(listener => listener());\n        },\n        reset: () => {\n          state = { ...state, count: 0 };\n          listeners.forEach(listener => listener());\n        }\n      };\n      \n      console.log(`Created shared state store for counter context`);\n      return sharedStore;\n    }\n    \n    // Default shared store for other contexts\n    return {\n      getState: () => ({}),\n      setState: () => {},\n      subscribe: () => () => {}\n    };\n  }\n\n  private exposeContextAPIs(fynApp: FynApp, fynAppContexts: Map<string, ContextInstanceData>): void {\n    // Expose context hooks and utilities to the FynApp\n    const contextAPIs: Record<string, any> = {};\n    const sharedProviderSymbols: Record<string, symbol> = {}; // NEW: Collect symbols for shared providers\n    \n    for (const [contextName, contextData] of fynAppContexts.entries()) {\n      const { factory, config } = contextData;\n      \n      if (config.shared) {\n        // For shared contexts, provide the shared Provider instance and symbol\n        const sharedProvider = this.sharedProviderInstances.get(contextName);\n        const sharedSymbol = this.sharedProviderSymbols.get(contextName);\n        \n        contextAPIs[contextName] = {\n          useContext: factory.useContext,\n          useContextSelector: factory.useContextSelector,\n          Context: factory.Context,\n          Provider: factory.Provider, // Original Provider (for manual use)\n          SharedProvider: sharedProvider, // Pre-configured shared Provider\n        };\n        \n        if (sharedSymbol) {\n          sharedProviderSymbols[contextName] = sharedSymbol;\n        }\n        \n        console.log(`Exposed shared Provider for context \"${contextName}\" to ${fynApp.name}`);\n      } else {\n        // For non-shared contexts, provide the regular Provider\n        contextAPIs[contextName] = {\n          useContext: factory.useContext,\n          useContextSelector: factory.useContextSelector,\n          Context: factory.Context,\n          Provider: factory.Provider,\n        };\n      }\n    }\n\n    // Method to get shared provider by symbol\n    const getSharedProvider = (symbol: symbol): React.ComponentType<{ children: ReactNode }> | undefined => {\n      for (const [contextName, contextSymbol] of this.sharedProviderSymbols.entries()) {\n        if (contextSymbol === symbol) {\n          return this.sharedProviderInstances.get(contextName);\n        }\n      }\n      return undefined;\n    };\n\n    // Lazy getter for shared symbols - allows access even if contexts aren't created yet\n    const getLazySharedSymbols = (): Record<string, symbol> => {\n      const symbols: Record<string, symbol> = {};\n      for (const [contextName, symbol] of this.sharedProviderSymbols.entries()) {\n        symbols[contextName] = symbol;\n      }\n      return symbols;\n    };\n\n    // Store APIs in middlewareContext (kernel guarantees this exists)\n    fynApp.middlewareContext.set(this.name, { \n      ...contextAPIs, \n      getSharedProvider, // Add the method to get shared providers by symbol\n      getLazySharedSymbols // Add lazy getter for shared symbols\n    });\n    \n    // Store shared provider symbols under a documented key (with lazy getter)\n    fynApp.middlewareContext.set(`${this.name}:shared-symbols`, getLazySharedSymbols());\n    \n    if (Object.keys(sharedProviderSymbols).length > 0) {\n      console.log(`Stored shared provider symbols for ${Object.keys(sharedProviderSymbols).join(', ')} in ${fynApp.name}`);\n    }\n    \n    console.log(`Exposed ${Object.keys(contextAPIs).join(', ')} context APIs to ${fynApp.name} via middlewareContext`);\n  }\n\n  // Cleanup method for proper disposal\n  public cleanup(fynApp: FynApp): void {\n    const contexts = this.contextInstances.get(fynApp);\n    if (contexts) {\n      for (const [contextName, contextData] of contexts.entries()) {\n        if (contextData.config.persistence) {\n          // Clear persistence if needed\n          this.storageManager.clear(contextData.config.persistence, \n            contextData.shared ? undefined : fynApp.name);\n        }\n      }\n      this.contextInstances.delete(fynApp);\n    }\n    \n    // Remove from secondary consumers tracking\n    this.secondaryConsumers.delete(fynApp);\n  }\n\n  // Debug method to list active contexts\n  public listContexts(fynApp?: FynApp): string[] {\n    if (fynApp) {\n      const contexts = this.contextInstances.get(fynApp);\n      return contexts ? Array.from(contexts.keys()) : [];\n    }\n    return Array.from(this.contextFactories.keys());\n  }\n}\n"],"names":[],"mappings":"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"}