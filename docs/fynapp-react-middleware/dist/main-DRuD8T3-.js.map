{"version":3,"file":"main-DRuD8T3-.js","sources":["../src/main.ts"],"sourcesContent":["import { ReactContextMiddleware } from \"./middleware/react-context\";\nimport { FynAppMiddleware, FynAppMiddlewareCallContext } from \"@fynmesh/kernel\";\n\n// =============================================================================\n// Export for Federation\n// =============================================================================\n\n/**\n * Export middleware instance for federation loading\n * The kernel will look for exports that start with __middleware__\n */\nexport const __middleware__ReactContext = new ReactContextMiddleware();\n\nexport const __middleware__BasicCounter: FynAppMiddleware = {\n  name: \"basic-counter\",\n\n  async setup(cc: FynAppMiddlewareCallContext): Promise<any> {\n    const mwContext = cc.runtime.middlewareContext;\n\n    let status = \"defer\";\n\n    // get config from fynapp's useMiddleware\n    // need the middleware usage object\n\n    const config = cc.meta.config;\n    if (config !== \"consume-only\") {\n      const shareKey = `${cc.reg.fullKey}-${cc.fynApp.name}@${cc.fynApp.version}`;\n      const initialConfig = {\n        count: 0,\n        ...(config as any),\n      };\n\n      const eventTarget = new EventTarget();\n\n      const data = mwContext.get(this.name) || {\n        initialConfig, // Store the original config for reset functionality\n        config: { ...initialConfig }, // Current working config\n        eventTarget, // Standard EventTarget for inter-app communication\n\n        // Methods for apps to use\n        increment(source?: string) {\n          this.config.count++;\n          const event = new CustomEvent(\"counterChanged\", {\n            detail: {\n              count: this.config.count,\n              source: source || \"unknown\",\n            },\n          });\n          this.eventTarget.dispatchEvent(event);\n          return this.config.count;\n        },\n\n        reset(source?: string) {\n          this.config.count = this.initialConfig.count;\n          const event = new CustomEvent(\"counterChanged\", {\n            detail: {\n              count: this.config.count,\n              source: source || \"unknown\",\n            },\n          });\n          this.eventTarget.dispatchEvent(event);\n          return this.config.count;\n        },\n\n        setCount(newCount: number, source?: string) {\n          this.config.count = newCount;\n          const event = new CustomEvent(\"counterChanged\", {\n            detail: {\n              count: this.config.count,\n              source: source || \"unknown\",\n            },\n          });\n          this.eventTarget.dispatchEvent(event);\n          return this.config.count;\n        },\n      };\n\n      mwContext.set(this.name, data);\n      cc.reg.hostFynApp.middlewareContext.set(shareKey, data);\n      status = \"ready\";\n      const event = new CustomEvent(\"MIDDLEWARE_READY\", {\n        detail: { name: this.name, share: { shareKey }, status, cc },\n      });\n      cc.kernel.emitAsync(event);\n      console.debug(\n        `üîç fynapp-react-middleware: Basic counter ready event dispatched now:`,\n        Date.now()\n      );\n    } else {\n      const shareKey = cc.runtime.share?.shareKey;\n      console.debug(\n        \"üîç fynapp-react-middleware: basic counter shareKey:\",\n        shareKey,\n        cc.runtime\n      );\n      const data = cc.reg.hostFynApp.middlewareContext.get(shareKey);\n      if (data) {\n        mwContext.set(this.name, data);\n        status = \"ready\";\n      }\n      console.debug(\n        `üîç fynapp-react-middleware: status: ${status} Basic counter setup for`,\n        cc.fynApp.name,\n        cc.fynApp.version,\n        \"is consume-only now:\",\n        Date.now()\n      );\n    }\n\n    return { status };\n  },\n\n  apply(_cc: FynAppMiddlewareCallContext) {\n    // nothing to apply\n  },\n};\n"],"names":["exports","ReactContextMiddleware","name","setup","cc","mwContext","runtime","middlewareContext","status","config","meta","shareKey","reg","fullKey","fynApp","version","initialConfig","count","eventTarget","EventTarget","data","get","this","increment","source","event","CustomEvent","detail","dispatchEvent","reset","setCount","newCount","set","hostFynApp","share","kernel","emitAsync","console","debug","Date","now","_a","apply","_cc"],"mappings":"mSAWuCA,EAAA,6BAAG,IAAIC,GAEPD,EAAA,6BAAqB,CAC1DE,KAAM,gBAEN,WAAMC,CAAMC,SACV,MAAMC,EAAYD,EAAGE,QAAQC,kBAE7B,IAAIC,EAAS,QAKb,MAAMC,EAASL,EAAGM,KAAKD,OACvB,GAAe,iBAAXA,EAA2B,CAC7B,MAAME,EAAW,GAAGP,EAAGQ,IAAIC,WAAWT,EAAGU,OAAOZ,QAAQE,EAAGU,OAAOC,UAC5DC,EAAgB,CACpBC,MAAO,KACHR,GAGAS,EAAc,IAAIC,YAElBC,EAAOf,EAAUgB,IAAIC,KAAKpB,OAAS,CACvCc,gBACAP,OAAQ,IAAKO,GACbE,cAGA,SAAAK,CAAUC,GACRF,KAAKb,OAAOQ,QACZ,MAAMQ,EAAQ,IAAIC,YAAY,iBAAkB,CAC9CC,OAAQ,CACNV,MAAOK,KAAKb,OAAOQ,MACnBO,OAAQA,GAAU,aAItB,OADAF,KAAKJ,YAAYU,cAAcH,GACxBH,KAAKb,OAAOQ,OAGrB,KAAAY,CAAML,GACJF,KAAKb,OAAOQ,MAAQK,KAAKN,cAAcC,MACvC,MAAMQ,EAAQ,IAAIC,YAAY,iBAAkB,CAC9CC,OAAQ,CACNV,MAAOK,KAAKb,OAAOQ,MACnBO,OAAQA,GAAU,aAItB,OADAF,KAAKJ,YAAYU,cAAcH,GACxBH,KAAKb,OAAOQ,OAGrB,QAAAa,CAASC,EAAkBP,GACzBF,KAAKb,OAAOQ,MAAQc,EACpB,MAAMN,EAAQ,IAAIC,YAAY,iBAAkB,CAC9CC,OAAQ,CACNV,MAAOK,KAAKb,OAAOQ,MACnBO,OAAQA,GAAU,aAItB,OADAF,KAAKJ,YAAYU,cAAcH,GACxBH,KAAKb,OAAOQ,QAIvBZ,EAAU2B,IAAIV,KAAKpB,KAAMkB,GACzBhB,EAAGQ,IAAIqB,WAAW1B,kBAAkByB,IAAIrB,EAAUS,GAClDZ,EAAS,QACT,MAAMiB,EAAQ,IAAIC,YAAY,mBAAoB,CAChDC,OAAQ,CAAEzB,KAAMoB,KAAKpB,KAAMgC,MAAO,CAAEvB,YAAYH,SAAQJ,QAE1DA,EAAG+B,OAAOC,UAAUX,GACpBY,QAAQC,MACN,wEACAC,KAAKC,WAEF,CACL,MAAM7B,EAA2B,QAAhB8B,EAAArC,EAAGE,QAAQ4B,aAAK,IAAAO,OAAA,EAAAA,EAAE9B,SACnC0B,QAAQC,MACN,sDACA3B,EACAP,EAAGE,SAEL,MAAMc,EAAOhB,EAAGQ,IAAIqB,WAAW1B,kBAAkBc,IAAIV,GACjDS,IACFf,EAAU2B,IAAIV,KAAKpB,KAAMkB,GACzBZ,EAAS,SAEX6B,QAAQC,MACN,uCAAuC9B,4BACvCJ,EAAGU,OAAOZ,KACVE,EAAGU,OAAOC,QACV,uBACAwB,KAAKC,OAIT,MAAO,CAAEhC,WAGX,KAAAkC,CAAMC"}