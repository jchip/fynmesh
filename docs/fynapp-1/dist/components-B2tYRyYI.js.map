{"version":3,"file":"components-B2tYRyYI.js","sources":["../src/components.ts"],"sourcesContent":["/**\n* This file handles dynamic imports of the reusable components from fynapp-x1\n* These imports are managed by the fynmesh kernel's module federation system\n*/\nimport React from 'react';\n\n// Type definition for the component library\nexport type ComponentLibrary = {\n    Button: React.ComponentType<any>;\n    Card: React.ComponentType<any>;\n    Input: React.ComponentType<any>;\n    Modal: React.ComponentType<any>;\n    Alert: React.ComponentType<any>;\n    Badge: React.ComponentType<any>;\n    Spinner: React.ComponentType<any>;\n};\n\n/**\n * Preloads all components from fynapp-x1 and returns them as a library\n * This should be called before rendering the App component\n */\nexport const preloadComponents = async (): Promise<ComponentLibrary> => {\n    try {\n        // dynamic import exposed modules from module federation remote container\n        // @ts-ignore - TS can't understand module federation remote containers\n        const components = await import('fynapp-x1/main', { with: { type: \"mf-expose\", requireVersion: \"^2.0.0\" } }) as ComponentLibrary;\n\n        // Return the components library\n        return components;\n    } catch (error) {\n        console.error('Failed to load components from fynapp-x1:', error);\n        throw error;\n    }\n};\n\n// Get a specific component by name\nexport const getComponent = async (name: keyof ComponentLibrary) => {\n    const components = await preloadComponents();\n    return components[name];\n};\n\n// Export a lazy loading wrapper for each component\nexport const createLazyComponent = (componentName: keyof ComponentLibrary) => {\n    return React.lazy(() =>\n        preloadComponents()\n            .then(module => ({\n                default: module[componentName]\n            }))\n    );\n};\n"],"names":["async","Federation","_importExpose","error","console"],"mappings":"uOAqBiCA,UAC7B,IAMI,aAHyBC,EAAAC,cAAO,oCAIlC,MAAOC,GAEL,MADAC,QAAQD,MAAM,4CAA6CA,GACrDA"}