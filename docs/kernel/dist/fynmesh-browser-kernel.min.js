!function(){"use strict";class e extends EventTarget{constructor(){super()}on(e,n,t){this.addEventListener(e,n,t)}once(e,n,t){const r=t=>(this.removeEventListener(e,r),function(e){return"function"==typeof e}(n)?n(t):n.handleEvent(t));this.addEventListener(e,r,t)}}const n={regKey:""};class t{constructor(){this.version="1.0.0",this.shareScopeName="fynmesh",this.deferInvoke=[],this.middlewareReady=new Map,this.events=new e,this.runTime={appsLoaded:{},middlewares:{}},this.events.on("MIDDLEWARE_READY",e=>{this.handleMiddlewareReady(e)})}async emitAsync(e){return this.events.dispatchEvent(e)}async handleMiddlewareReady(e){const{name:n,status:t,cc:r,share:i}=e.detail,s=i||{};this.middlewareReady.set(r.reg.fullKey,s);const a=[];for(let e=0;e<this.deferInvoke.length;e++){const{callContexts:n}=this.deferInvoke[e];let t=0;for(const e of n)e.reg.fullKey===r.reg.fullKey&&(e.runtime.share=s,e.status="ready"),"ready"===e.status&&t++;t===n.length&&(a.push(this.deferInvoke[e]),this.deferInvoke[e]=null)}if(a.length>0){this.deferInvoke=this.deferInvoke.filter(Boolean);for(const e of a)await this.callMiddlewares(e.callContexts)}console.debug(`✅ Middleware ${n} status: ${t} regKey: ${r.reg.regKey} now: ${Date.now()}`)}registerMiddleware(e){const{regKey:n,hostFynApp:t}=e,r=this.runTime.middlewares[n]||Object.create(null);r[t.version]?console.debug(`⚠️ Middleware already registered: ${n}@${t.version} - skipping duplicate registration`):(r[t.version]=e,r.default||(r.default=e),this.runTime.middlewares[n]=r,console.debug(`✅ Registered middleware: ${n}@${t.version}`))}getMiddleware(e,t){if(t){const n=`${t}::${e}`,r=this.runTime.middlewares[n];if(r){const e=r.default;if(e)return e}}return n}initRunTime(e){return this.runTime={...e},this.runTime}cleanContainerName(e){return e.replace(/[\@\-./]/g,"_").replace(/^_*/,"")}async loadExposeModule(e,n,t){const r=e.entry.container;if(r?.$E[n]){const r=(await e.entry.get(n))(),i=[];if(t){for(const[t,s]of Object.entries(r))if(t.startsWith("__middleware__")){const r=s,a=r.name,o={regKey:`${e.name}::${a}`,fullKey:`${e.name}@${e.version}::${a}`,hostFynApp:e,exposeName:n,exportName:t,middleware:r};this.registerMiddleware(o),i.push(t)}return console.debug(`✅ Expose module '${n}' loaded for`,e.name,e.version,i.length>0?"middlewares registered:":"",i.join(", ")),e.exposes[n]=r,r.__name&&(e.exposes[r.__name]=r),r}console.debug(`❌ No expose module '${n}' found for`,e.name,e.version)}}async loadFynAppBasics(e){const n=e.container;console.debug("🚀 Initializing FynApp entry",n.name,n.version),e.init(),console.debug("🚀 Loading FynApp basics for",n.name,n.version);const t={name:n.name,version:n.version||"1.0.0",packageName:n.name,entry:e,middlewareContext:new Map,exposes:{}};if(n&&n.$E["./config"]){const n=await e.get("./config");t.config=n()}return e.setup&&(console.debug("🚀 Invoking entry.setup for",t.name,t.version),await e.setup()),await this.loadExposeModule(t,"./main",!0),console.debug("✅ FynApp basics loaded for",t.name,t.version),t}createFynModuleRuntime(e){return{fynApp:e,middlewareContext:new Map}}async invokeFynModule(e,n){const t=this.createFynModuleRuntime(n);e.initialize&&(console.debug("🚀 Invoking module.initialize for",n.name,n.version),await e.initialize(t)),e.execute&&(console.debug("🚀 Invoking module.execute for",n.name,n.version),await e.execute(t))}checkSingleMiddlewareReady(e){return!!this.middlewareReady.has(e.reg.fullKey)&&(e.runtime.share=this.middlewareReady.get(e.reg.fullKey),e.status="ready",!0)}checkMiddlewareReady(e){let n="ready";for(const t of e)this.checkSingleMiddlewareReady(t)||(n="defer");return n}checkDeferCalls(e,n){return"defer"===e?"ready"===this.checkMiddlewareReady(n)?"retry":(this.deferInvoke.push({callContexts:n}),"defer"):"ready"}async callMiddlewares(e,n=0){if(n>1)throw console.error("🚨 Middleware setup failed after 2 tries",e),new Error("Middleware setup failed after 2 tries");this.checkMiddlewareReady(e);let t="ready";for(const n of e){const{fynApp:e,reg:r}=n,i=r.middleware;if(this.checkSingleMiddlewareReady(n),i.setup){console.debug("🚀 Invoking middleware",r.regKey,"setup for",e.name,e.version);const s=await i.setup(n);"defer"===s?.status&&(t="defer")}}if(t=this.checkDeferCalls(t,e),"defer"===t)return t;if("retry"===t)return await this.callMiddlewares(e,n+1);const r=e[0].fynMod,i=e[0].fynApp,s=e[0].runtime;if(r.initialize){console.debug("🚀 Invoking user.initialize for",i.name,i.version);const a=await r.initialize(s);if(t=this.checkDeferCalls(a?.status,e),"defer"===t)return t;if("retry"===t)return await this.callMiddlewares(e,n+1)}for(const n of e){const{reg:e}=n,t=e.middleware;t.apply&&(console.debug("🚀 Invoking middleware",e.regKey,"apply for",i.name,i.version),await t.apply(n))}return r.execute&&(console.debug("🚀 Invoking user.execute for",i.name,i.version),await r.execute(s)),"ready"}async useMiddlewareOnFynModule(e,n){if(!e.__middlewareMeta)return"";const t=this.createFynModuleRuntime(n),r=e.__middlewareMeta.map(r=>{const i=r.info,s=this.getMiddleware(i.name,i.provider);return""===s.regKey?(console.debug("❌ No middleware found for",i.name,i.provider),{}):{meta:r,fynMod:e,fynApp:n,reg:s,kernel:this,runtime:t,status:""}}).filter(e=>void 0!==e.meta);return this.callMiddlewares(r)}async bootstrapFynApp(e){if(e.entry.config?.loadMiddlewares)for(const n of Object.keys(e.entry.container.$E))n.startsWith("./middleware")&&await this.loadExposeModule(e,n,!0);const n=e.exposes["./main"]?.main;n&&(console.debug("🚀 Bootstrapping FynApp",e.name,e.version),"function"==typeof n?await n(this.createFynModuleRuntime(e)):n.__middlewareMeta?await this.useMiddlewareOnFynModule(n,e):await this.invokeFynModule(n,e)),console.debug("✅ FynApp bootstrapped",e.name,e.version)}buildFynAppUrl(e,n="fynapp-entry.js"){return function(e,n){const t=n.startsWith("/")||e.endsWith("/")?"":"/";return`${e}${t}${n}`}(e,n)}}class r extends t{async loadFynApp(e,n){const t=globalThis.Federation;if(!t)throw new Error("Federation.js is not loaded.");try{n=n||e;const r=this.buildFynAppUrl(e);console.debug("🚀 Loading FynApp from",r);const i=await t.import(r);console.debug("🚀 FynApp entry loaded",i);const s=await this.loadFynAppBasics(i);await this.bootstrapFynApp(s)}catch(n){throw console.error(`Failed to load remote fynapp from ${e}:`,n),n}}}globalThis.fynMeshKernel=function(){const e=new r;return e.initRunTime({appsLoaded:{},middlewares:{}}),e}()}();
//# sourceMappingURL=fynmesh-browser-kernel.min.js.map
